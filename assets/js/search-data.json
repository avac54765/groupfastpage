{
  
    
        "post0": {
            "title": "Writing/Testing Frontend Code for Project",
            "content": "Button Ideas for Email . let emailbtn = document.createElement(&quot;button&quot;); emailbtn.innerHTML = &quot;Click here for an email draft&quot;; emailbtn.onclick = function () { alert(&quot;Email button clicked&quot;); console.log(&quot;Email button clicked&quot;); }; document.body.appendChild(emailbtn) . &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;title&gt; Email Draft Button &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; id=&quot;Button&quot;&gt;&lt;/div&gt; &lt;script&gt; const emailbtn = document.getElementById(&quot;button&quot;); emailbtn.addEventListener(&quot;click&quot;, function(e) { alert(&quot;Button clicked&quot;); console.log(&quot;email button clicked&quot;) }) &lt;/script&gt; &lt;/body&gt; . Input In [3] &lt;!DOCTYPE html&gt; ^ SyntaxError: invalid syntax . &lt;!-- info from w3schools--&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;style&gt; .button { padding: 15px 25px; font-size: 24px; text-align: center; cursor: pointer; outline: none; color: #fff; background-color: #04AA6D; border: none; border-radius: 15px; box-shadow: 0 9px #999; } .button:hover {background-color: #3e8e41} .button:active { background-color: #3e8e41; box-shadow: 0 5px #666; transform: translateY(4px); } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;Animated Buttons - &quot;Pressed Effect&quot;&lt;/h2&gt; &lt;button class=&quot;button&quot;&gt;Click Me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt; . Pop-up Modal Box (for when button is clicked) . &lt;!-- from w3schools --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;style&gt; body {font-family: Arial, Helvetica, sans-serif;} /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ padding-top: 100px; /* Location of the box */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ } /* Modal Content */ .modal-content { background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 80%; } /* The Close Button */ .close { color: #aaaaaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;Modal Example&lt;/h2&gt; &lt;!-- Trigger/Open The Modal --&gt; &lt;button id=&quot;myBtn&quot;&gt;Open Modal&lt;/button&gt; &lt;!-- The Modal --&gt; &lt;div id=&quot;myModal&quot; class=&quot;modal&quot;&gt; &lt;!-- Modal content --&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;span class=&quot;close&quot;&gt;&amp;times;&lt;/span&gt; &lt;p&gt;Some text in the Modal..&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // Get the modal var modal = document.getElementById(&quot;myModal&quot;); // Get the button that opens the modal var btn = document.getElementById(&quot;myBtn&quot;); // Get the &lt;span&gt; element that closes the modal var span = document.getElementsByClassName(&quot;close&quot;)[0]; // When the user clicks the button, open the modal btn.onclick = function() { modal.style.display = &quot;block&quot;; } // When the user clicks on &lt;span&gt; (x), close the modal span.onclick = function() { modal.style.display = &quot;none&quot;; } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if (event.target == modal) { modal.style.display = &quot;none&quot;; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . A To-Do list for the Merchandise User . &lt;!-- From w3schools --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;style&gt; body { margin: 0; min-width: 250px; } /* Include the padding and border in an element&#39;s total width and height */ * { box-sizing: border-box; } /* Remove margins and padding from the list */ ul { margin: 0; padding: 0; } /* Style the list items */ ul li { cursor: pointer; position: relative; padding: 12px 8px 12px 40px; list-style-type: none; background: #eee; font-size: 18px; transition: 0.2s; /* make the list items unselectable */ -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } /* Set all odd list items to a different color (zebra-stripes) */ ul li:nth-child(odd) { background: #f9f9f9; } /* Darker background-color on hover */ ul li:hover { background: #ddd; } /* When clicked on, add a background color and strike out text */ ul li.checked { background: #888; color: #fff; text-decoration: line-through; } /* Add a &quot;checked&quot; mark when clicked on */ ul li.checked::before { content: &#39;&#39;; position: absolute; border-color: #fff; border-style: solid; border-width: 0 2px 2px 0; top: 10px; left: 16px; transform: rotate(45deg); height: 15px; width: 7px; } /* Style the close button */ .close { position: absolute; right: 0; top: 0; padding: 12px 16px 12px 16px; } .close:hover { background-color: #f44336; color: white; } /* Style the header */ .header { background-color: #f44336; padding: 30px 40px; color: white; text-align: center; } /* Clear floats after the header */ .header:after { content: &quot;&quot;; display: table; clear: both; } /* Style the input */ input { margin: 0; border: none; border-radius: 0; width: 75%; padding: 10px; float: left; font-size: 16px; } /* Style the &quot;Add&quot; button */ .addBtn { padding: 10px; width: 25%; background: #d9d9d9; color: #555; float: left; text-align: center; font-size: 16px; cursor: pointer; transition: 0.3s; border-radius: 0; } .addBtn:hover { background-color: #bbb; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;myDIV&quot; class=&quot;header&quot;&gt; &lt;h2 style=&quot;margin:5px&quot;&gt;My To Do List&lt;/h2&gt; &lt;input type=&quot;text&quot; id=&quot;myInput&quot; placeholder=&quot;Title...&quot;&gt; &lt;span onclick=&quot;newElement()&quot; class=&quot;addBtn&quot;&gt;Add&lt;/span&gt; &lt;/div&gt; &lt;ul id=&quot;myUL&quot;&gt; &lt;li&gt;Hit the gym&lt;/li&gt; &lt;li class=&quot;checked&quot;&gt;Pay bills&lt;/li&gt; &lt;li&gt;Meet George&lt;/li&gt; &lt;li&gt;Buy eggs&lt;/li&gt; &lt;li&gt;Read a book&lt;/li&gt; &lt;li&gt;Organize office&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; // Create a &quot;close&quot; button and append it to each list item var myNodelist = document.getElementsByTagName(&quot;LI&quot;); var i; for (i = 0; i &lt; myNodelist.length; i++) { var span = document.createElement(&quot;SPAN&quot;); var txt = document.createTextNode(&quot; u00D7&quot;); span.className = &quot;close&quot;; span.appendChild(txt); myNodelist[i].appendChild(span); } // Click on a close button to hide the current list item var close = document.getElementsByClassName(&quot;close&quot;); var i; for (i = 0; i &lt; close.length; i++) { close[i].onclick = function() { var div = this.parentElement; div.style.display = &quot;none&quot;; } } // Add a &quot;checked&quot; symbol when clicking on a list item var list = document.querySelector(&#39;ul&#39;); list.addEventListener(&#39;click&#39;, function(ev) { if (ev.target.tagName === &#39;LI&#39;) { ev.target.classList.toggle(&#39;checked&#39;); } }, false); // Create a new list item when clicking on the &quot;Add&quot; button function newElement() { var li = document.createElement(&quot;li&quot;); var inputValue = document.getElementById(&quot;myInput&quot;).value; var t = document.createTextNode(inputValue); li.appendChild(t); if (inputValue === &#39;&#39;) { alert(&quot;You must write something!&quot;); } else { document.getElementById(&quot;myUL&quot;).appendChild(li); } document.getElementById(&quot;myInput&quot;).value = &quot;&quot;; var span = document.createElement(&quot;SPAN&quot;); var txt = document.createTextNode(&quot; u00D7&quot;); span.className = &quot;close&quot;; span.appendChild(txt); li.appendChild(span); for (i = 0; i &lt; close.length; i++) { close[i].onclick = function() { var div = this.parentElement; div.style.display = &quot;none&quot;; } } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Parallax Scrolling (fixed back image)- maybe for Homepage/ background of different pages (add button on image??) . &lt;!-- from w3schools--&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;style&gt; .parallax { /* The image used */ background-image: url(&quot;img_parallax.jpg&quot;); /* Set a specific height */ min-height: 500px; /* Create the parallax scrolling effect */ background-attachment: fixed; background-position: center; background-repeat: no-repeat; background-size: cover; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Scroll Up and Down this page to see the parallax scrolling effect.&lt;/p&gt; &lt;div class=&quot;parallax&quot;&gt;&lt;/div&gt; &lt;div style=&quot;height:1000px;background-color:red;font-size:36px&quot;&gt; Scroll Up and Down this page to see the parallax scrolling effect. This div is just here to enable scrolling. Tip: Try to remove the background-attachment property to remove the scrolling effect. &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Pill Button . &lt;!-- use this button for a more rounded button instead of sharp edges--&gt; &lt;button class=&quot;button&quot;&gt;Pill Button&lt;/button&gt; .",
            "url": "https://coolcoders.github.io/groupfastpage/projectcode/notebook",
            "relUrl": "/projectcode/notebook",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Planning/Drafting Code for Our Final Project",
            "content": "",
            "url": "https://coolcoders.github.io/groupfastpage/project/code",
            "relUrl": "/project/code",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Project Week One Blog",
            "content": "Our Successes . We were able to get the Jokes API working on both our backend and frontend | We successfully created our stock API and got it to communicate with our frontend | when we type /ap/stocks onto our domain, a list of all our merchendise items appear | we were able to test/debug and find a solution to a module not found (created Python Path) | . Our Issues . as stated above, when we tried testing locally our stock_api was not found, so we googled the issue and figured out a way to use PYTHONPATH to solve the unknown module issue | Our frontend isn’t working quite as planned: the names of the merchandise items show up as “undefined” and the -1 funtion on quantity does not perform as expected | syntax errors to think about: | merch commisioner will want to be able to input their actual quantity of items (not randomized) | what happens if their quanitity goes below 0? (-1 function) | . ## Other’s Videos . | .",
            "url": "https://coolcoders.github.io/groupfastpage/finalproject/weekone",
            "relUrl": "/finalproject/weekone",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fetch of Backend Stocks",
            "content": "| Overview | Stock API | Jokes API | . Merchandise Item Quantity .",
            "url": "https://coolcoders.github.io/groupfastpage/data/stocks",
            "relUrl": "/data/stocks",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Video Script",
            "content": "Shruthi’s Job: DevOps Engineer . -Describe software and programming tools a) Identify authoring tools (IDE’s, Docker, GitHub) used b) Describe and/or show visuals of interactions and integration of programming languages, protocols, and data within project. . The Idea . Our group wants to make a project that serves as a helpful tool for the ASB class to keep track of profits, quantities, and other things related to merchandise. . Steps for Completion . Make an outline of all the abilities this program will have | Decide what funtions/pieces we will need to accomplish this | Code, code, code! | continue to use scrum board and process! | Brain Write . Problem-based-learning program: Idea is around ASB Merchandise Commissioner Management. . A system where an asb user can keep track of merchandise. merchandise stock | design organization | merchandise orders | emails | . | Attributes: user input for orders and order descriptions (also customer name and email) | commissioner info (name, grade, position, etc.) commissioner password (one password for everyone) | . | created a pre-written email draft off of a button to a specific customer | Use loops, variables, and lists to keep track of merchandise stock (have a return message for when reaches zero) | use JSON to make a table of all merch and customer info | HTML nav bars and menus | new page for merch designs, have a section for new ideas, in progress, and finalized desings (either have input for images or text imput of links to design pages) | . | . Agile Development . Requirements: things listed above, constraints: making the system too complicated | impact: this project will help make the work of a merchandise commissioner easier and more organized | . User Experience . Home page (design fastpage homepage) | submenu on home page leading to same pages as nav bar | has navigation bar with : order data (customer name, quantity ordered, item ordered, income) | stock (keeps track of inventory) | email page (prepared draft ready to be edited and sent out) | . | Implementing . Use group fastpage to create website have nav bar with pages above | make submenu with links to pages | . | make API= list of merchandise items (keeping track of stock) list of dictionaries of ID#, description, quantity) | . | make API= |",
            "url": "https://coolcoders.github.io/groupfastpage/finalplanning/markdown",
            "relUrl": "/finalplanning/markdown",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://coolcoders.github.io/groupfastpage/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Javascript Web Page using an API",
            "content": "The code below holds the info that is being generated into an HTML table. . Key things to know: . &lt; table &gt; creates a TABLE | &lt; tr &gt; creates a ROW | &lt; th &gt; makes the text a column HEADER | &lt; tbody id = &quot;results&quot; &gt; defines an element id, to be used within JavaScript | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Joke&lt;/th&gt; &lt;th&gt;HaHa&lt;/th&gt; &lt;th&gt;Boohoo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; . Constant variables are declared here with keyword const . Key things to know: . The document object &quot;result&quot; represents table body in the HTML above. | If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing &quot;result&quot; and defining a &quot;resultContainer&quot; | In the code, in following cells, document elements are created and organized for each Joke, each is added to the &quot;resultContainer&quot; as a row in the table body. | Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend | . // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const HAHA = &quot;haha&quot;; const BOOHOO = &quot;boohoo&quot;; // prepare fetch urls const url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; // haha reaction const jeer_url = url + &quot;/jeer/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method . The below code uses a function called fetch to gather the data from the backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked in case the site is down and returns an error | On successful fetch, the code places each Joke in the HTML table body using a &quot;for&quot; loop and creating document elements from each &quot;row&quot; of the fetched &quot;data&quot;. | The creation of each Haha and Boohoo &quot;onclick&quot; &quot;button&quot; is also done in the same loop. | Updates to backend are setup to occur with each onclick, each click calls the &quot;reaction&quot; function | . // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const joke = document.createElement(&quot;td&quot;); joke.innerHTML = row.id + &quot;. &quot; + row.joke; // add fetched data to innerHTML // td for haha cell with onclick actions const haha = document.createElement(&quot;td&quot;); const haha_but = document.createElement(&#39;button&#39;); haha_but.id = HAHA+row.id // establishes a HAHA JS id for cell haha_but.innerHTML = row.haha; // add fetched &quot;haha count&quot; to innerHTML haha_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(HAHA, like_url+row.id, haha_but.id); }; haha.appendChild(haha_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const boohoo = document.createElement(&quot;td&quot;); const boohoo_but = document.createElement(&#39;button&#39;); boohoo_but.id = BOOHOO+row.id // establishes a BOOHOO JS id for cell boohoo_but.innerHTML = row.boohoo; // add fetched &quot;boohoo count&quot; to innerHTML boohoo_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(BOOHOO, jeer_url+row.id, boohoo_but.id); }; boohoo.appendChild(boohoo_but); // add &quot;boohoo button&quot; to boohoo cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . The below code uses fetch to update backend data using &quot;put_options&quot;. The purpose is to update Hahaa and Bohoo counters in backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked to verify update occurred | The element id of button clicked is updated with the data returned from the API. | Note, the elemID is received as parameter. This data was setup when the button was created in former cell. | . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } . Hacks . The code below relates to the rapidapi you worked with last week. . What are some similarities you see with the javascript for the jokes api? | In a blogpost, break up the code in cells like done above and try to describe what this code is doing. | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://coolcoders.github.io/groupfastpage/techtalk/webfrontend",
            "relUrl": "/techtalk/webfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Final Project College Board Criteria",
            "content": "College Board Criteria . Program Purpose and Function: To assist an ASB merch commisioner with the merchandise designing, tracking, and contacting processes. . | Data Abstraction: Collect orders and data (names and info) from customers . | Managing Complexity: Use a list with customer information (names and orders) and use a list for merch counting . | Procedural Abstraction: will define our own funtions for keeping track of stock . | Algorithm Implementation: will use iteration (lists for each funtion) and selection (if/else statements) and sequencing (step by step processes) . | Testing: We will test every aspect of our project (and often) to ensure we identify and correct our mistakes. . | .",
            "url": "https://coolcoders.github.io/groupfastpage/finalplanning/criteria",
            "relUrl": "/finalplanning/criteria",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Final Project Wire Frame and UML",
            "content": ".",
            "url": "https://coolcoders.github.io/groupfastpage/finalplanning/wireframe",
            "relUrl": "/finalplanning/wireframe",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Final Project Planning",
            "content": "The Idea . Our group wants to make a project that serves as a helpful tool for the ASB class to keep track of profits, quantities, and other things related to merchandise. . Steps for Completion . Make an outline of all the abilities this program will have | Decide what funtions/pieces we will need to accomplish this | Code, code, code! | continue to use scrum board and process! | Brain Write . Problem-based-learning program: Idea is around ASB Merchandise Commissioner Management. . A system where an asb user can keep track of merchandise. merchandise stock | design organization | merchandise orders | emails | . | Attributes: user input for orders and order descriptions (also customer name and email) | commissioner info (name, grade, position, etc.) commissioner password (one password for everyone) | . | created a pre-written email draft off of a button to a specific customer | Use loops, variables, and lists to keep track of merchandise stock (have a return message for when reaches zero) | use JSON to make a table of all merch and customer info | HTML nav bars and menus | new page for merch designs, have a section for new ideas, in progress, and finalized desings (either have input for images or text imput of links to design pages) | . | . Agile Development . Requirements: things listed above, constraints: making the system too complicated | impact: this project will help make the work of a merchandise commissioner easier and more organized | . User Experience . Home page (design fastpage homepage) | submenu on home page leading to same pages as nav bar | has navigation bar with : order data (customer name, quantity ordered, item ordered, income) | stock (keeps track of inventory) | email page (prepared draft ready to be edited and sent out) | . | Implementing . Use group fastpage to create website have nav bar with pages above | make submenu with links to pages | . | make API= list of merchandise items (keeping track of stock) list of dictionaries of ID#, description, quantity) | . | make API= |",
            "url": "https://coolcoders.github.io/groupfastpage/finalplanning/markdown",
            "relUrl": "/finalplanning/markdown",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Scrum Process",
            "content": "My Group’s Scrum Process . . First, my group will meet and discuss the directions given to us. We will then assign the work to our roles. During the sprint, we will continue to meet daily to discuss our progress. We will also continue to use our scrum board on Github to track our progress and what we need to get done. | . Member Roles . Below are the roles of our members for sprints and teamwork oriented projects. . Name Role Job Description . Ava Carlson | Scrum Master | Helps to facilitate the sprint by ensuring that an agile framework is followed; Committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. | . Alexa Carlson | Frontend Developer | A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. | . Shruthi Damodar | DevOps | DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies (requirements.txt), AWS deployment are some of the key functions that impact velocity. | . Antony Yu | Backend Developer | Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | . Our Scrum Board .",
            "url": "https://coolcoders.github.io/groupfastpage/AgileMethodology/scrumprocess",
            "relUrl": "/AgileMethodology/scrumprocess",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Fetch of Backend Jokes",
            "content": "| Overview | Stock API | Jokes API | . Joke HaHa Boohoo .",
            "url": "https://coolcoders.github.io/groupfastpage/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Jul 10, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "API",
          "content": "| Overview | Stock API | Jokes API | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://coolcoders.github.io/groupfastpage/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://coolcoders.github.io/groupfastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Merchandise User Project",
          "content": ". Draft Email to Customer &times; Hello __(customer name here)__! Thank you so much for your order! Please come to the student store at lunch to pick up your new swaggy merchandise! Sincerely, __Merch Andise__(commissioner name) Del Norte ASB Merchandise Commmissioner . .",
          "url": "https://coolcoders.github.io/groupfastpage/merch/project",
          "relUrl": "/merch/project",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://coolcoders.github.io/groupfastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}